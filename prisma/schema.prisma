generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// User Model
model User {
  id           String       @id @default(uuid())
  name         String
  username     String       @unique
  email        String       @unique
  role         UserRole     @default(USER)
  status       UserStatus   @default(ACTIVE)
  password     String
  bloodType    BloodType
  location     String
  availability Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  // One-to-one relation with UserProfile
  userProfile  UserProfile?
  // One-to-many relation with Request as a donor
  donate       Request[]    @relation("UserDonorRequests")
  // One-to-many relation with Request as a requester
  requestes    Request[]    @relation("UserRequesterRequests")

  @@map("users")
}

// Request Model
model Request {
  id             String        @id @default(uuid())
  donorId        String?
  requesterId    String?
  bloodType      BloodType
  numberOfBag    Int
  phoneNumber    String
  dateOfDonation String
  reason         String
  requestStatus  RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  // Donor relation
  donor          User?         @relation("UserDonorRequests", fields: [donorId], references: [id])
  // Requester relation
  requester      User?         @relation("UserRequesterRequests", fields: [requesterId], references: [id])

  @@map("requests")
}

// UserProfile Model
model UserProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  bio              String?
  profilePicture   String?
  dateOfBirth      String
  lastDonationDate String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // User relation
  user             User     @relation(fields: [userId], references: [id])

  @@map("userProfiles")
}

model LiveDB {
  id        String   @id @default(uuid())
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}
